{"version":3,"sources":["settings.ts","button/Button.tsx","register/Register.tsx","post/Post.tsx","newPost/NewPost.tsx","blog/Blog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["urlRoot","Buton","isLoading","isDisabled","onClick","children","style","className","type","value","disabled","Register","changeView","React","useState","username","setUsername","password","setPassword","isUserExist","setIsUserExist","error","setError","setIsLoading","authorization","a","fetch","method","headers","body","JSON","stringify","response","json","is_success","length","localStorage","isUserLogin","message","changeMode","registerMode","onSubmit","e","preventDefault","onChange","target","Button","marginTop","href","Post","title","id","created","text","setText","header","setHeader","textCopy","setTextCopy","headerCopy","setHeaderCopy","isReadMode","setMode","isPostDeleted","deletePost","isPostEditable","postDeleting","postUpdating","readOnly","color","rows","cols","NewPost","addNewPost","isCreationMode","setTitle","setLoading","postCreating","Blog","posts","setPosts","useEffect","getPosts","data","post","concat","map","App","setItem","isRegisterPage","setIsRegisterPage","logout","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf6599f1.chunk.js","sourcesContent":["export const urlRoot = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : ''\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\ntype TButton = {\r\n    isLoading?: boolean,\r\n    isDisabled?: boolean,\r\n    onClick?: () => void,\r\n    style?: any\r\n}\r\n\r\nconst Buton: React.FunctionComponent<TButton> = ({\r\n    isLoading = false,\r\n    isDisabled = false,\r\n    onClick,\r\n    children,\r\n    style = {}\r\n}) => {\r\n\r\n    return <div>    \r\n        <div style={style} className='main_block'>\r\n        {\r\n            isLoading ?\r\n                <div className=\"loader\">\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            :\r\n                <input {...{\r\n                    onClick: () => { onClick && onClick() },\r\n                    className: \"button\",\r\n                    type: 'submit',\r\n                    value: children && typeof children === 'string' ?  children : 'Submit',\r\n                    disabled: isDisabled,\r\n                }}/>\r\n        }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Buton\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nimport { urlRoot } from '../settings'\r\n\r\nimport { Button } from '../button'\r\n\r\ntype TRegister = {\r\n    changeView: () => void\r\n}\r\nexport default function Register({changeView}: TRegister) {\r\n\r\n    let [username, setUsername] = React.useState('')\r\n    let [password, setPassword] = React.useState('')\r\n    let [isUserExist, setIsUserExist] = React.useState(true)\r\n    let [error, setError] = React.useState('')\r\n\r\n    let [isLoading, setIsLoading] = React.useState(false)\r\n\r\n    const authorization = async () => {\r\n        setIsLoading(true)\r\n        let response;\r\n        response = await fetch(\r\n            `${ urlRoot }/auth/${isUserExist ? 'login' : 'register'}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({username, password})\r\n        })\r\n\r\n        let json = await response.json()\r\n\r\n        if (json.is_success) {\r\n            setPassword('')\r\n            setUsername('')\r\n            setIsUserExist(json.is_success)\r\n            error.length > 0 && setError('')\r\n            if ( isUserExist ) {\r\n                localStorage.username = username\r\n                localStorage.isUserLogin = 'true'\r\n                changeView()\r\n            } \r\n        } else {\r\n            setError(json.message)\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n    \r\n    const changeMode = (registerMode: boolean) => {\r\n        setIsUserExist(registerMode)\r\n        setPassword('')\r\n        setUsername('')\r\n        error.length > 0 && setError('')\r\n}\r\n\r\n    return <div>\r\n        {\r\n            isUserExist ? \r\n                <h2>Log in</h2>\r\n            :\r\n                <h2>Register a new user</h2>\r\n        }\r\n\r\n        <form className=\"form\" onSubmit={\r\n            (e) => { \r\n                e.preventDefault()\r\n                authorization()\r\n            }\r\n        }>\r\n            <div className=\"item\">\r\n                <label>\r\n                    Username:\r\n                </label>\r\n                <input {...{\r\n                    type: 'text',\r\n                    value: username,\r\n                    onChange: (e) => {\r\n                        setUsername(e.target.value)\r\n                    },\r\n                    disabled: isLoading,\r\n                }}/>\r\n            </div>\r\n            <div className=\"item\">\r\n                <label>\r\n                    Password:\r\n                </label>\r\n                <input {...{\r\n                    type: 'password',\r\n                    value: password,\r\n                    onChange: (e) => {\r\n                        setPassword(e.target.value)\r\n                    },\r\n                    disabled: isLoading,\r\n                }}/>\r\n            </div>\r\n            <Button {...{\r\n                isLoading,\r\n                isDisabled: !(username.length > 0 && password.length > 0),\r\n                style: {marginTop: '4vh'}\r\n            }}/>\r\n        </form>\r\n        <div className=\"error-block\">\r\n            { error }\r\n        </div>\r\n        <div className=\"link-block\">\r\n            {\r\n                isUserExist ?\r\n                    <a href='#' onClick={() => { changeMode(false) }}>\r\n                        Create account\r\n                    </a>\r\n                :\r\n                    <a href='#' onClick={() => { changeMode(true) }}>\r\n                        I already have account\r\n                    </a>\r\n            }\r\n        </div>\r\n    </div>\r\n}","import React from 'react'\r\nimport './style.css'\r\n\r\nimport { Button } from '../button'\r\nimport { TPost } from '../types'\r\n\r\nimport { urlRoot } from '../settings'\r\n\r\n\r\nconst Post: React.FunctionComponent<TPost> = ({ body, title, id, created, username }) => {\r\n    let [text, setText] = React.useState(body)\r\n    let [header, setHeader] = React.useState(title)\r\n    let [textCopy, setTextCopy] = React.useState(body)\r\n    let [headerCopy, setHeaderCopy] = React.useState(title)\r\n\r\n    let [isReadMode, setMode] = React.useState(true)\r\n    let [isPostDeleted, deletePost] = React.useState(false)\r\n    let [isLoading, setIsLoading] = React.useState(false)\r\n    let [error, setError] = React.useState('')\r\n\r\n    let profileName = localStorage.username\r\n    const isPostEditable = profileName === username\r\n\r\n    if (isPostDeleted) return <div key={ id }></div>   //  Не вижу смысла перебирать массив заметок на уровне родительского компанента\r\n\r\n    const postDeleting = async () => {\r\n        setIsLoading(true)\r\n        let response;\r\n        response = await fetch(\r\n            `${ urlRoot }/blog/${ id }/delete`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            // body: JSON.stringify({header, body: text})\r\n        })\r\n\r\n        let json = await response.json()\r\n\r\n        if (json.is_success) {\r\n            deletePost(true)\r\n        } else {\r\n            setError(json.message)\r\n        }\r\n\r\n        setIsLoading(false)\r\n    }\r\n\r\n    const postUpdating = async () => {\r\n        setIsLoading(true)\r\n        let response = await fetch(\r\n            `${ urlRoot }/blog/${ id }/update`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({title: header, body: text})\r\n        })\r\n\r\n        let json = await response.json()\r\n        if (json.is_success) {\r\n            setText(textCopy)\r\n            setHeader(headerCopy)\r\n            setMode(!isReadMode)\r\n        } else {\r\n            setError(json.message)\r\n        }\r\n\r\n        setIsLoading(false)\r\n\r\n    }\r\n\r\n    return <div key={ id } className='post'>\r\n        <div>\r\n            <div {...{\r\n                className: 'title_area',\r\n            }}>\r\n                <span> Autor: { username } </span>\r\n                <span> Date: { created } </span>\r\n            </div>\r\n           \r\n            <div className='post_header'>\r\n                <div>\r\n                    <input {...{\r\n                        type: 'text',\r\n                        value: headerCopy,\r\n                        readOnly: isReadMode,\r\n                        disabled: isLoading,\r\n                        onChange: (e) => { setHeaderCopy(e.target.value) }\r\n                    }}/>\r\n                </div>\r\n\r\n                {\r\n                    isPostEditable && (\r\n                        isReadMode ?\r\n                        <span className='buttons_block'>\r\n                            <Button {...{\r\n                                isLoading: false,\r\n                                onClick: () => { setMode(!isReadMode) }\r\n                            }}> Edit </Button>\r\n                            {\r\n                                error.length === 0 ?\r\n                                    <Button {...{\r\n                                        isLoading,\r\n                                        onClick: () => {\r\n                                            postDeleting()\r\n                                        }\r\n                                    }}> Delete </Button>\r\n                                :\r\n                                    <Button {...{\r\n                                        isLoading: false,\r\n                                        onClick: () => {\r\n                                            setError('')\r\n                                        }\r\n                                    }}>\r\n                                        Hide error\r\n                                    </Button>\r\n                            }\r\n                        </span>\r\n                        :\r\n                        <span className='buttons_block'>\r\n                            <Button {...{\r\n                                onClick: postUpdating,\r\n                                isLoading,\r\n                            }}> Save </Button>\r\n                            <Button {...{\r\n                                isLoading: false,\r\n                                onClick: () => {\r\n                                    setError('')\r\n                                    setHeaderCopy(header)\r\n                                    setTextCopy(text)\r\n                                    setMode(!isReadMode)\r\n                                }\r\n                            }}> Cancel </Button>\r\n                        </span>\r\n                    )\r\n                }\r\n            </div>\r\n            <div style={{ color: 'red' }}> \r\n                { error }   \r\n            </div>\r\n\r\n\r\n        </div>\r\n        <div>\r\n            <textarea {...{\r\n                rows: 5,\r\n                cols: 70,\r\n                readOnly: isReadMode,\r\n                value: textCopy,\r\n                disabled: isLoading,\r\n                onChange: (e) => { setTextCopy(e.target.value) } \r\n            }} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport './style.css';\r\nimport { urlRoot } from '../settings'\r\n\r\nimport { Button } from '../button'\r\n\r\ntype TNewPost = {\r\n    addNewPost: (post: any) => void\r\n}\r\n\r\nconst NewPost = ({ addNewPost }: TNewPost) => {\r\n\r\n    let [isCreationMode, setMode] = React.useState(false)\r\n    let [title, setTitle] = React.useState('')\r\n    let [text, setText] = React.useState('')\r\n    let [error, setError] = React.useState('')\r\n    let [isLoading, setLoading] = React.useState(false)\r\n\r\n    const postCreating = async () => {\r\n        setLoading(true)\r\n        let response;\r\n        response = await fetch(\r\n            `${ urlRoot }/blog/create`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({title, body: text})\r\n        })\r\n\r\n        let json = await response.json()\r\n\r\n        if (json.is_success) {\r\n            setTitle('')\r\n            setText('')\r\n            setMode(!isCreationMode)\r\n            addNewPost(json.message[0])\r\n        } else {\r\n            setError(json.message)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    return <div className='new_post'>\r\n        {\r\n            isCreationMode ?\r\n                <div className='post_header_new_post'>\r\n                    <div>\r\n                        <span> Title: </span>\r\n                        <input {...{\r\n                            type: 'text',\r\n                            disabled: isLoading,\r\n                            value: title,\r\n                            onChange: (e) => { setTitle(e.target.value) }\r\n                        }}/>\r\n                    </div>\r\n                    <div className='buttons_block_new_post' >\r\n                        <Button {...{\r\n                            onClick: postCreating,\r\n                            isLoading, \r\n                        }}>\r\n                            Save\r\n                        </Button>\r\n                        <Button {...{\r\n                            isLoading: false,\r\n                            onClick: () => {\r\n                                setTitle('')\r\n                                setText('')\r\n                                setError('')\r\n                                setMode(!isCreationMode)\r\n                            }\r\n                        }}>\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            :\r\n            <button {...{\r\n                onClick: () => {\r\n                    setMode(!isCreationMode)\r\n                }\r\n            }}>\r\n                    Create new post\r\n                </button>\r\n        }\r\n        <div style={{ color: 'red' }}> { error } </div>\r\n        {\r\n            isCreationMode && <div>\r\n                <textarea {...{\r\n                    rows: 5,\r\n                    cols: 70,\r\n                    value: text,\r\n                    disabled: isLoading,\r\n                    onChange: (e) => { setText(e.target.value) } \r\n                }} />\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default NewPost","import React from 'react';\r\nimport './style.css'\r\n\r\nimport { urlRoot } from '../settings'\r\n\r\nimport { Post } from '../post'\r\nimport { NewPost } from '../newPost'\r\n\r\nimport { TPost } from '../types'\r\n\r\n\r\nexport default function Blog() {\r\n\r\n    let [posts, setPosts] = React.useState<TPost[]>([])\r\n\r\n    React.useEffect(() => {\r\n        getPosts()\r\n    }, [])\r\n\r\n    const getPosts = async () => {\r\n        let response;\r\n        response = await fetch(\r\n            `${ urlRoot }/blog/posts`\r\n        )\r\n\r\n        let data = await response.json()\r\n        setPosts(data)\r\n    }\r\n\r\n    return <div className='content_area'>\r\n        <NewPost {...{\r\n            addNewPost: (post: TPost) => {\r\n                setPosts([])\r\n                setPosts([post].concat(posts))\r\n            },\r\n        }}/>\r\n        \r\n        <div>\r\n            { posts.map( (post) => <Post { ...post }/> ) }\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Register } from './register'\nimport { Blog } from './blog'\nimport { Button } from './button'\n\nimport { urlRoot } from './settings'\n\n\nfunction App() {\n  if (!localStorage.isUserLogin) {\n    localStorage.setItem('isUserLogin', 'false')\n    localStorage.setItem('username', '')\n  }\n\n  let [isRegisterPage, setIsRegisterPage] = React.useState(localStorage.isUserLogin === 'false')\n\n  let [isLoading, setIsLoading] = React.useState(false)\n\n  const logout = async () => {\n    setIsLoading(true)\n    let response;\n    response = await fetch(\n      `${ urlRoot }/auth/logout`\n    )\n    setIsRegisterPage(!isRegisterPage)\n    localStorage.isUserLogin = 'false'\n    localStorage.setItem('username', '')\n    setIsLoading(false)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <p> Your name: { localStorage.username } </p>\n        {\n          isRegisterPage || \n            <Button {...{\n                isLoading,\n                onClick: logout,\n                style: {marginBottom: '10px'}\n            }}>\n              Log out\n            </Button>\n        }\n      </header>\n      <div className='App-content'>\n        {\n          isRegisterPage ? \n            <Register {...{\n              changeView: () => {\n                setIsRegisterPage(!isRegisterPage)\n              }            \n            }}/>\n          :\n            <Blog />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}